// package.json dependencies needed:
// npm install mongodb @types/mongodb dotenv @types/dotenv

import { MongoClient, Collection, InsertManyResult, BulkWriteResult } from 'mongodb';
import * as dotenv from 'dotenv';

dotenv.config();

// Type definitions
interface User {
  _id?: string;
  name: string;
  email: string;
  age: number;
  department: string;
  salary: number;
  joinDate: Date;
  isActive: boolean;
  skills: string[];
  address: {
    street: string;
    city: string;
    state: string;
    zipCode: string;
    country: string;
  };
}

interface Product {
  _id?: string;
  name: string;
  description: string;
  price: number;
  category: string;
  brand: string;
  sku: string;
  inStock: boolean;
  quantity: number;
  tags: string[];
  createdAt: Date;
  updatedAt: Date;
}

class MongoDBBulkOperations {
  private client: MongoClient;
  private dbName: string;

  constructor(connectionString: string, dbName: string) {
    this.client = new MongoClient(connectionString);
    this.dbName = dbName;
  }

  async connect(): Promise<void> {
    try {
      await this.client.connect();
      console.log('Connected to MongoDB');
    } catch (error) {
      console.error('MongoDB connection error:', error);
      throw error;
    }
  }

  async disconnect(): Promise<void> {
    await this.client.close();
    console.log('Disconnected from MongoDB');
  }

  // Method 1: Simple insertMany for bulk operations
  async insertManyRecords<T>(
    collectionName: string, 
    documents: T[], 
    batchSize: number = 1000
  ): Promise<void> {
    const collection: Collection<T> = this.client.db(this.dbName).collection(collectionName);
    
    try {
      console.log(`Starting bulk insert of ${documents.length} documents...`);
      const startTime = Date.now();

      // Process in batches to avoid memory issues
      for (let i = 0; i < documents.length; i += batchSize) {
        const batch = documents.slice(i, i + batchSize);
        
        const result: InsertManyResult<T> = await collection.insertMany(batch, {
          ordered: false, // Continue on error
          writeConcern: { w: 'majority', j: true }
        });
        
        console.log(`Batch ${Math.floor(i / batchSize) + 1}: Inserted ${result.insertedCount} documents`);
      }

      const endTime = Date.now();
      console.log(`Bulk insert completed in ${endTime - startTime}ms`);
    } catch (error) {
      console.error('Error during bulk insert:', error);
      throw error;
    }
  }

  // Method 2: Using bulkWrite for more control and mixed operations
  async bulkWriteOperations<T>(
    collectionName: string, 
    documents: T[]
  ): Promise<BulkWriteResult> {
    const collection: Collection<T> = this.client.db(this.dbName).collection(collectionName);
    
    try {
      console.log(`Starting bulk write operations for ${documents.length} documents...`);
      const startTime = Date.now();

      // Create bulk operations array
      const bulkOps = documents.map(doc => ({
        insertOne: {
          document: doc
        }
      }));

      const result: BulkWriteResult = await collection.bulkWrite(bulkOps, {
        ordered: false,
        writeConcern: { w: 'majority', j: true }
      });

      const endTime = Date.now();
      console.log(`Bulk write completed in ${endTime - startTime}ms`);
      console.log(`Inserted: ${result.insertedCount}, Modified: ${result.modifiedCount}, Upserted: ${result.upsertedCount}`);
      
      return result;
    } catch (error) {
      console.error('Error during bulk write:', error);
      throw error;
    }
  }

  // Generate sample user data
  generateUsers(count: number): User[] {
    const departments = ['Engineering', 'Sales', 'Marketing', 'HR', 'Finance'];
    const skills = ['JavaScript', 'Python', 'Java', 'React', 'Node.js', 'MongoDB', 'SQL'];
    const cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'];
    const states = ['NY', 'CA', 'IL', 'TX', 'AZ'];

    return Array.from({ length: count }, (_, i) => ({
      name: `User ${i + 1}`,
      email: `user${i + 1}@example.com`,
      age: Math.floor(Math.random() * 40) + 22,
      department: departments[Math.floor(Math.random() * departments.length)],
      salary: Math.floor(Math.random() * 80000) + 40000,
      joinDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000),
      isActive: Math.random() > 0.1,
      skills: skills.slice(0, Math.floor(Math.random() * 4) + 1),
      address: {
        street: `${Math.floor(Math.random() * 9999) + 1} Main St`,
        city: cities[Math.floor(Math.random() * cities.length)],
        state: states[Math.floor(Math.random() * states.length)],
        zipCode: String(Math.floor(Math.random() * 90000) + 10000),
        country: 'USA'
      }
    }));
  }

  // Generate sample product data
  generateProducts(count: number): Product[] {
    const categories = ['Electronics', 'Clothing', 'Books', 'Home', 'Sports'];
    const brands = ['BrandA', 'BrandB', 'BrandC', 'BrandD', 'BrandE'];
    const tags = ['popular', 'sale', 'new', 'featured', 'bestseller'];

    return Array.from({ length: count }, (_, i) => ({
      name: `Product ${i + 1}`,
      description: `Description for product ${i + 1}`,
      price: Math.floor(Math.random() * 1000) + 10,
      category: categories[Math.floor(Math.random() * categories.length)],
      brand: brands[Math.floor(Math.random() * brands.length)],
      sku: `SKU${String(i + 1).padStart(6, '0')}`,
      inStock: Math.random() > 0.2,
      quantity: Math.floor(Math.random() * 100),
      tags: tags.slice(0, Math.floor(Math.random() * 3) + 1),
      createdAt: new Date(),
      updatedAt: new Date()
    }));
  }

  // Performance monitoring method
  async insertWithPerformanceMonitoring<T>(
    collectionName: string,
    documents: T[],
    batchSize: number = 1000
  ): Promise<void> {
    const collection: Collection<T> = this.client.db(this.dbName).collection(collectionName);
    
    console.log(`Performance monitoring enabled for ${documents.length} documents`);
    const startTime = Date.now();
    let totalInserted = 0;

    try {
      for (let i = 0; i < documents.length; i += batchSize) {
        const batchStartTime = Date.now();
        const batch = documents.slice(i, i + batchSize);
        
        const result = await collection.insertMany(batch, {
          ordered: false,
          writeConcern: { w: 'majority' }
        });
        
        const batchEndTime = Date.now();
        totalInserted += result.insertedCount;
        
        const batchNumber = Math.floor(i / batchSize) + 1;
        const batchTime = batchEndTime - batchStartTime;
        const docsPerSecond = Math.round((result.insertedCount / batchTime) * 1000);
        
        console.log(`Batch ${batchNumber}: ${result.insertedCount} docs in ${batchTime}ms (${docsPerSecond} docs/sec)`);
      }

      const totalTime = Date.now() - startTime;
      const overallDocsPerSecond = Math.round((totalInserted / totalTime) * 1000);
      
      console.log(`\n=== Performance Summary ===`);
      console.log(`Total documents: ${totalInserted}`);
      console.log(`Total time: ${totalTime}ms`);
      console.log(`Average speed: ${overallDocsPerSecond} documents/second`);
      
    } catch (error) {
      console.error('Error during performance monitored insert:', error);
      throw error;
    }
  }
}

// Main execution function
async function main() {
  // MongoDB connection string - replace with your actual connection string
  const connectionString = process.env.MONGODB_URI || 'mongodb://localhost:27017';
  const dbName = process.env.DB_NAME || 'bulk_insert_demo';
  
  const mongoOps = new MongoDBBulkOperations(connectionString, dbName);

  try {
    await mongoOps.connect();

    // Example 1: Insert 2000 users using insertMany
    console.log('\n=== Example 1: Inserting 2000 Users ===');
    const users = mongoOps.generateUsers(2000);
    await mongoOps.insertManyRecords('users', users, 500);

    // Example 2: Insert 2000 products using bulkWrite
    console.log('\n=== Example 2: Inserting 2000 Products with BulkWrite ===');
    const products = mongoOps.generateProducts(2000);
    await mongoOps.bulkWriteOperations('products', products);

    // Example 3: Performance monitoring insert
    console.log('\n=== Example 3: Performance Monitored Insert ===');
    const moreUsers = mongoOps.generateUsers(3000);
    await mongoOps.insertWithPerformanceMonitoring('users_performance', moreUsers, 1000);

    console.log('\n=== All operations completed successfully ===');

  } catch (error) {
    console.error('Application error:', error);
  } finally {
    await mongoOps.disconnect();
  }
}

// Export for use in other modules
export { MongoDBBulkOperations, User, Product };

// Run if this file is executed directly
if (require.main === module) {
  main().catch(console.error);
}