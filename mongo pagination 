// package.json
{
  "name": "mongodb-pagination-system",
  "version": "1.0.0",
  "description": "MongoDB pagination with date range filtering",
  "main": "dist/server.js",
  "scripts": {
    "build": "tsc",
    "start": "node dist/server.js",
    "dev": "ts-node src/server.ts",
    "watch": "tsc -w"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongodb": "^6.3.0",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/cors": "^2.8.17",
    "@types/node": "^20.10.5",
    "typescript": "^5.3.3",
    "ts-node": "^10.9.2"
  }
}

// tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}

// .env
MONGODB_URI=mongodb://localhost:27017/pagination_db
PORT=3000
NODE_ENV=development

// src/types/index.ts
export interface PaginationQuery {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  startDate?: string;
  endDate?: string;
  timeRange?: TimeRangeOption;
  search?: string;
}

export type TimeRangeOption = 
  | '5minutes'
  | '10minutes'
  | '1hour'
  | '24hours'
  | '7days'
  | 'custom';

export interface PaginationResult<T> {
  data: T[];
  pagination: {
    currentPage: number;
    totalPages: number;
    totalItems: number;
    itemsPerPage: number;
    hasNextPage: boolean;
    hasPrevPage: boolean;
  };
  filters: {
    dateRange?: {
      startDate: Date;
      endDate: Date;
    };
    timeRange?: TimeRangeOption;
    search?: string;
  };
}

export interface DatabaseDocument {
  _id?: any;
  createdAt: Date;
  updatedAt?: Date;
  [key: string]: any;
}

// src/utils/dateUtils.ts
export class DateUtils {
  static getTimeRangeInMinutes(timeRange: TimeRangeOption): number {
    const timeRanges: Record<Exclude<TimeRangeOption, 'custom'>, number> = {
      '5minutes': 5,
      '10minutes': 10,
      '1hour': 60,
      '24hours': 1440, // 24 * 60
      '7days': 10080  // 7 * 24 * 60
    };
    
    return timeRanges[timeRange as Exclude<TimeRangeOption, 'custom'>] || 0;
  }

  static getDateRangeFromTimeOption(timeRange: TimeRangeOption): { startDate: Date; endDate: Date } {
    const endDate = new Date();
    const minutes = this.getTimeRangeInMinutes(timeRange);
    const startDate = new Date(endDate.getTime() - (minutes * 60 * 1000));
    
    return { startDate, endDate };
  }

  static validateDateRange(startDate: string, endDate: string): { isValid: boolean; error?: string } {
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    if (isNaN(start.getTime())) {
      return { isValid: false, error: 'Invalid start date format' };
    }
    
    if (isNaN(end.getTime())) {
      return { isValid: false, error: 'Invalid end date format' };
    }
    
    if (start >= end) {
      return { isValid: false, error: 'Start date must be before end date' };
    }
    
    return { isValid: true };
  }

  static parseDateString(dateStr: string): Date {
    return new Date(dateStr);
  }
}

// src/utils/paginationUtils.ts
import { PaginationQuery, PaginationResult, TimeRangeOption } from '../types';
import { DateUtils } from './dateUtils';

export class PaginationUtils {
  static validatePaginationParams(query: PaginationQuery): {
    page: number;
    limit: number;
    sortBy: string;
    sortOrder: 'asc' | 'desc';
  } {
    const page = Math.max(1, parseInt(query.page?.toString() || '1'));
    const limit = Math.min(100, Math.max(1, parseInt(query.limit?.toString() || '10')));
    const sortBy = query.sortBy || 'createdAt';
    const sortOrder = query.sortOrder === 'asc' ? 'asc' : 'desc';
    
    return { page, limit, sortBy, sortOrder };
  }

  static buildDateFilter(query: PaginationQuery): any {
    let dateFilter: any = {};
    
    if (query.timeRange && query.timeRange !== 'custom') {
      const { startDate, endDate } = DateUtils.getDateRangeFromTimeOption(query.timeRange);
      dateFilter.createdAt = {
        $gte: startDate,
        $lte: endDate
      };
    } else if (query.startDate && query.endDate) {
      const validation = DateUtils.validateDateRange(query.startDate, query.endDate);
      if (validation.isValid) {
        dateFilter.createdAt = {
          $gte: DateUtils.parseDateString(query.startDate),
          $lte: DateUtils.parseDateString(query.endDate)
        };
      }
    } else if (query.startDate) {
      dateFilter.createdAt = {
        $gte: DateUtils.parseDateString(query.startDate)
      };
    } else if (query.endDate) {
      dateFilter.createdAt = {
        $lte: DateUtils.parseDateString(query.endDate)
      };
    }
    
    return dateFilter;
  }

  static buildSearchFilter(searchTerm?: string, searchFields: string[] = []): any {
    if (!searchTerm || searchFields.length === 0) return {};
    
    return {
      $or: searchFields.map(field => ({
        [field]: { $regex: searchTerm, $options: 'i' }
      }))
    };
  }

  static buildSortObject(sortBy: string, sortOrder: 'asc' | 'desc'): any {
    return { [sortBy]: sortOrder === 'asc' ? 1 : -1 };
  }

  static buildPaginationResult<T>(
    data: T[],
    totalItems: number,
    page: number,
    limit: number,
    query: PaginationQuery
  ): PaginationResult<T> {
    const totalPages = Math.ceil(totalItems / limit);
    
    let filters: any = {};
    
    if (query.timeRange && query.timeRange !== 'custom') {
      const { startDate, endDate } = DateUtils.getDateRangeFromTimeOption(query.timeRange);
      filters.dateRange = { startDate, endDate };
      filters.timeRange = query.timeRange;
    } else if (query.startDate && query.endDate) {
      filters.dateRange = {
        startDate: DateUtils.parseDateString(query.startDate),
        endDate: DateUtils.parseDateString(query.endDate)
      };
      filters.timeRange = 'custom';
    }
    
    if (query.search) {
      filters.search = query.search;
    }
    
    return {
      data,
      pagination: {
        currentPage: page,
        totalPages,
        totalItems,
        itemsPerPage: limit,
        hasNextPage: page < totalPages,
        hasPrevPage: page > 1
      },
      filters
    };
  }
}

// src/services/mongoService.ts
import { MongoClient, Db, Collection, Filter, FindOptions } from 'mongodb';
import { PaginationQuery, PaginationResult, DatabaseDocument } from '../types';
import { PaginationUtils } from '../utils/paginationUtils';

export class MongoService {
  private client: MongoClient;
  private db: Db;

  constructor(connectionString: string, dbName: string) {
    this.client = new MongoClient(connectionString);
    this.db = this.client.db(dbName);
  }

  async connect(): Promise<void> {
    try {
      await this.client.connect();
      console.log('Connected to MongoDB');
    } catch (error) {
      console.error('MongoDB connection error:', error);
      throw error;
    }
  }

  async disconnect(): Promise<void> {
    await this.client.close();
    console.log('Disconnected from MongoDB');
  }

  async paginate<T extends DatabaseDocument>(
    collectionName: string,
    query: PaginationQuery,
    searchFields: string[] = [],
    additionalFilters: Filter<T> = {}
  ): Promise<PaginationResult<T>> {
    const collection: Collection<T> = this.db.collection(collectionName);
    
    // Validate and normalize pagination parameters
    const { page, limit, sortBy, sortOrder } = PaginationUtils.validatePaginationParams(query);
    
    // Build filters
    const dateFilter = PaginationUtils.buildDateFilter(query);
    const searchFilter = PaginationUtils.buildSearchFilter(query.search, searchFields);
    const sortObject = PaginationUtils.buildSortObject(sortBy, sortOrder);
    
    // Combine all filters
    const combinedFilter: Filter<T> = {
      ...dateFilter,
      ...searchFilter,
      ...additionalFilters
    };
    
    // Calculate skip value for pagination
    const skip = (page - 1) * limit;
    
    // Execute queries
    const [data, totalItems] = await Promise.all([
      collection
        .find(combinedFilter)
        .sort(sortObject)
        .skip(skip)
        .limit(limit)
        .toArray(),
      collection.countDocuments(combinedFilter)
    ]);
    
    return PaginationUtils.buildPaginationResult(
      data,
      totalItems,
      page,
      limit,
      query
    );
  }

  async createSampleData(collectionName: string, count: number = 100): Promise<void> {
    const collection = this.db.collection(collectionName);
    
    const sampleData = Array.from({ length: count }, (_, i) => ({
      title: `Sample Document ${i + 1}`,
      description: `This is a sample document with index ${i + 1}`,
      category: ['tech', 'science', 'business', 'health'][i % 4],
      status: ['active', 'inactive', 'pending'][i % 3],
      createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days
      updatedAt: new Date(),
      tags: [`tag${i % 5}`, `category${i % 3}`],
      count: Math.floor(Math.random() * 1000)
    }));
    
    await collection.insertMany(sampleData);
    console.log(`Inserted ${count} sample documents`);
  }

  getCollection<T extends DatabaseDocument>(name: string): Collection<T> {
    return this.db.collection<T>(name);
  }
}

// src/controllers/dataController.ts
import { Request, Response } from 'express';
import { MongoService } from '../services/mongoService';
import { PaginationQuery, TimeRangeOption } from '../types';

export class DataController {
  constructor(private mongoService: MongoService) {}

  async getData(req: Request, res: Response): Promise<void> {
    try {
      const query: PaginationQuery = {
        page: req.query.page ? parseInt(req.query.page as string) : undefined,
        limit: req.query.limit ? parseInt(req.query.limit as string) : undefined,
        sortBy: req.query.sortBy as string,
        sortOrder: req.query.sortOrder as 'asc' | 'desc',
        startDate: req.query.startDate as string,
        endDate: req.query.endDate as string,
        timeRange: req.query.timeRange as TimeRangeOption,
        search: req.query.search as string
      };

      // Define which fields to search in
      const searchFields = ['title', 'description', 'category'];
      
      // Additional filters (you can modify this based on your needs)
      const additionalFilters = req.query.status ? { status: req.query.status } : {};

      const result = await this.mongoService.paginate(
        'documents',
        query,
        searchFields,
        additionalFilters
      );

      res.json({
        success: true,
        ...result
      });
    } catch (error) {
      console.error('Error in getData:', error);
      res.status(500).json({
        success: false,
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  async createSampleData(req: Request, res: Response): Promise<void> {
    try {
      const count = req.body.count || 100;
      await this.mongoService.createSampleData('documents', count);
      
      res.json({
        success: true,
        message: `Created ${count} sample documents`
      });
    } catch (error) {
      console.error('Error creating sample data:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to create sample data',
        message: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  async getTimeRangeOptions(req: Request, res: Response): Promise<void> {
    const timeRangeOptions = [
      { value: '5minutes', label: 'Last 5 minutes' },
      { value: '10minutes', label: 'Last 10 minutes' },
      { value: '1hour', label: 'Last 1 hour' },
      { value: '24hours', label: 'Last 24 hours' },
      { value: '7days', label: 'Last 7 days' },
      { value: 'custom', label: 'Custom date range' }
    ];

    res.json({
      success: true,
      data: timeRangeOptions
    });
  }
}

// src/routes/dataRoutes.ts
import { Router } from 'express';
import { DataController } from '../controllers/dataController';
import { MongoService } from '../services/mongoService';

export function createDataRoutes(mongoService: MongoService): Router {
  const router = Router();
  const dataController = new DataController(mongoService);

  // Get paginated data with filters
  router.get('/data', dataController.getData.bind(dataController));
  
  // Create sample data for testing
  router.post('/data/sample', dataController.createSampleData.bind(dataController));
  
  // Get available time range options
  router.get('/time-ranges', dataController.getTimeRangeOptions.bind(dataController));

  return router;
}

// src/middleware/errorHandler.ts
import { Request, Response, NextFunction } from 'express';

export interface AppError extends Error {
  statusCode?: number;
}

export const errorHandler = (
  err: AppError,
  req: Request,
  res: Response,
  next: NextFunction
): void => {
  console.error('Error:', err);

  const statusCode = err.statusCode || 500;
  const message = err.message || 'Internal Server Error';

  res.status(statusCode).json({
    success: false,
    error: message,
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
};

export const notFoundHandler = (req: Request, res: Response): void => {
  res.status(404).json({
    success: false,
    error: 'Route not found'
  });
};

// src/server.ts
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import dotenv from 'dotenv';
import { MongoService } from './services/mongoService';
import { createDataRoutes } from './routes/dataRoutes';
import { errorHandler, notFoundHandler } from './middleware/errorHandler';

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/pagination_db';

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Initialize MongoDB service
const mongoService = new MongoService(MONGODB_URI, 'pagination_db');

// Routes
app.use('/api', createDataRoutes(mongoService));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'Server is running',
    timestamp: new Date().toISOString()
  });
});

// Error handling middleware
app.use(notFoundHandler);
app.use(errorHandler);

// Start server
async function startServer() {
  try {
    await mongoService.connect();
    
    app.listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
      console.log(`Health check: http://localhost:${PORT}/health`);
      console.log(`API endpoint: http://localhost:${PORT}/api/data`);
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('Shutting down gracefully...');
  await mongoService.disconnect();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('Shutting down gracefully...');
  await mongoService.disconnect();
  process.exit(0);
});

startServer();

// README.md
# MongoDB Pagination System with Date Range Filtering

A complete Node.js TypeScript application for MongoDB pagination with advanced date range filtering and multiple time options.

## Features

- **Pagination**: Efficient cursor-based pagination with customizable page size
- **Date Range Filtering**: Multiple time range options (5min, 10min, 1hr, 24hr, 7days) + custom date ranges
- **Search**: Full-text search across multiple fields
- **Sorting**: Configurable sorting by any field with ascending/descending order
- **Type Safety**: Full TypeScript implementation with comprehensive type definitions
- **Error Handling**: Robust error handling and validation
- **Performance**: Optimized MongoDB queries with proper indexing recommendations

## Installation

```bash
npm install
```

## Environment Setup

Create a `.env` file:
```
MONGODB_URI=mongodb://localhost:27017/pagination_db
PORT=3000
NODE_ENV=development
```

## Scripts

```bash
npm run dev      # Development with hot-reload
npm run build    # Build for production
npm run start    # Start production server
```

## API Endpoints

### GET /api/data
Get paginated data with filtering options.

**Query Parameters:**
- `page` (number): Page number (default: 1)
- `limit` (number): Items per page (default: 10, max: 100)
- `sortBy` (string): Sort field (default: 'createdAt')
- `sortOrder` ('asc'|'desc'): Sort direction (default: 'desc')
- `timeRange` ('5minutes'|'10minutes'|'1hour'|'24hours'|'7days'|'custom'): Predefined time ranges
- `startDate` (ISO string): Custom start date (requires timeRange='custom')
- `endDate` (ISO string): Custom end date (requires timeRange='custom')
- `search` (string): Search term for full-text search
- `status` (string): Additional filter by status

**Example Requests:**
```bash
# Get last 24 hours of data
GET /api/data?timeRange=24hours&page=1&limit=20

# Custom date range
GET /api/data?timeRange=custom&startDate=2024-01-01&endDate=2024-01-31

# Search with pagination
GET /api/data?search=technology&page=2&limit=15&sortBy=title&sortOrder=asc
```

### POST /api/data/sample
Create sample data for testing.

### GET /api/time-ranges
Get available time range options.

## Usage Examples

```typescript
// Using the service directly
const mongoService = new MongoService(connectionString, 'mydb');
await mongoService.connect();

const result = await mongoService.paginate('documents', {
  page: 1,
  limit: 20,
  timeRange: '24hours',
  search: 'typescript',
  sortBy: 'createdAt',
  sortOrder: 'desc'
}, ['title', 'description']);

console.log(result.data); // Array of documents
console.log(result.pagination); // Pagination metadata
console.log(result.filters); // Applied filters
```

## Database Indexing

For optimal performance, create these indexes:

```javascript
// In MongoDB shell
db.documents.createIndex({ "createdAt": -1 });
db.documents.createIndex({ "title": "text", "description": "text" });
db.documents.createIndex({ "status": 1, "createdAt": -1 });
```

## Response Format

```json
{
  "success": true,
  "data": [...],
  "pagination": {
    "currentPage": 1,
    "totalPages": 10,
    "totalItems": 95,
    "itemsPerPage": 10,
    "hasNextPage": true,
    "hasPrevPage": false
  },
  "filters": {
    "dateRange": {
      "startDate": "2024-01-01T00:00:00.000Z",
      "endDate": "2024-01-31T23:59:59.999Z"
    },
    "timeRange": "custom",
    "search": "typescript"
  }
}
```

## Error Handling

The system includes comprehensive error handling for:
- Invalid date ranges
- MongoDB connection issues
- Invalid pagination parameters
- Search query errors

## TypeScript Types

All types are exported from `src/types/index.ts` for easy reuse in your application.